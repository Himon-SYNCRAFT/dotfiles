global !p

import vim
import json
import os

def projectRoot():
	root = vim.eval("finddir('.git/..', expand('%:p:h').';')")
	return root

def main_module_from_composer():
	filepath = projectRoot() + '/composer.json'
	if not os.path.isfile(filepath):
		return ''
	
	with open(filepath) as json_file:
		data = json.load(json_file)
		psr4 = data.get('autoload', dict()).get('psr-4', dict())
		for k, v in psr4.items():
			if v == 'src/':
				return k.replace('\\\\', '\\')

	return ''

def first_letter_lower(text):
    if not text:
        return ''
    return text[0].lower() + text[1:]

def first_letter_upper(text):
    if not text:
        return ''
    return text[0].upper() + text[1:]

endglobal

snippet php
<?php

declare(strict_types=1);
endsnippet

snippet strict
declare(strict_types=1);
endsnippet

snippet namespace
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = main_module_from_composer() + m.group().replace('/', '\\')
`};
endsnippet

snippet th "this" w
$this->${1}
endsnippet

snippet get
public function get${1}(): ${2}
{
	return $this->`!p snip.rv = first_letter_lower(t[1])`;
}
endsnippet

snippet set
public function set${1}(${2} $${3:`!p snip.rv = first_letter_lower(t[1])`}): ${4:void}
{
	$this->`!p snip.rv = first_letter_lower(t[1])` = $$3;
}
endsnippet

snippet con
public function __construct(${1})
{
	${2}
}
endsnippet

snippet "(\S.*).p" "parenthesis postfix code" br
${1}(`!p snip.rv = match.group(1)`)
endsnippet

snippet "(\S.*).var" "extract variable" br
$${1} = `!p snip.rv = match.group(1)`
endsnippet

snippet "(\S.*).if" "extract variable" br
if (`!p snip.rv = match.group(1)`${1})
{
	${2}
}
endsnippet

snippet if
if (${1}) {
	${2}
}
endsnippet

snippet for
for ($i = 0; $i ${1:<}; $i++) {
	${2}
}
endsnippet

snippet fore
foreach ($${1:array} as $${2:item}) {
	${3}
}
endsnippet

snippet fun
${1:public} function ${2}($3): ${4:void}
{
	${5}
}
endsnippet

snippet cl "class declaration template" b
<?php

declare(strict_types=1);

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = main_module_from_composer() + m.group().replace('/', '\\')
`};

class ${2:`!p snip.rv = snip.basename`}
{
}
endsnippet

snippet in "Interface declaration template" b
<?php

declare(strict_types=1);

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = main_module_from_composer() + m.group().replace('/', '\\')
`};

interface ${2:`!p snip.rv = snip.basename`}
{
	public function ${3:someFunction}();$4
}
endsnippet

snippet tr "Trait declaration template" b
<?php

declare(strict_types=1);

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = main_module_from_composer + m.group().replace('/', '\\')
`};

trait ${2:`!p snip.rv = snip.basename`}
{
}
endsnippet

snippet pra "private attribute in class" b
private ${1};
endsnippet

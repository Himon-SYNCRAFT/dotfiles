qtile/config.py:    # Run the utility of `xprop` to see the wm class and name of an X client.
alacritty.yml:# Any items in the `env` entry below will be added as
alacritty.yml:  # This value is used to set the `$TERM` environment variable for
alacritty.yml:  # check the local terminfo database and use `alacritty` if it is
alacritty.yml:  # available, otherwise `xterm-256color` is used.
alacritty.yml:  # If both are `0`, this setting is ignored.
alacritty.yml:  # Values for `decorations`:
alacritty.yml:  # Values for `decorations` (macOS only):
alacritty.yml:  # Values for `startup_mode`:
alacritty.yml:  # Values for `startup_mode` (macOS only):
alacritty.yml:  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
alacritty.yml:  # Set this to `None` to use the default theme variant.
alacritty.yml:    # The `style` can be specified to pick a specific face.
alacritty.yml:    # The `style` can be specified to pick a specific face.
alacritty.yml:    # The `style` can be specified to pick a specific face.
alacritty.yml:    # The `style` can be specified to pick a specific face.
alacritty.yml:  # Offset is the extra space around each character. `offset.y` can be thought of
alacritty.yml:  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
alacritty.yml:  # the default being at the bottom. Increasing `x` moves the glyph to the right,
alacritty.yml:  # increasing `y` moves the glyph upwards.
alacritty.yml:  # it is recommended to set `use_thin_strokes` to `false`
alacritty.yml:  # `use_thin_strokes` to `true` and enable font smoothing by running the
alacritty.yml:  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
alacritty.yml:# If `true`, bold text is drawn using the bright color variants.
alacritty.yml:    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
alacritty.yml:    # is `false`, the normal foreground color will be used.
alacritty.yml:  # on the `normal` colors.
alacritty.yml:  #   `- { index: 16, color: '#ff00ff' }`
alacritty.yml:# setting the `duration` property (represented in milliseconds). You can also
alacritty.yml:# configure the transition function by setting the `animation` property.
alacritty.yml:# Values for `animation`:
alacritty.yml:# Specifying a `duration` of `0` will disable the visual bell.
alacritty.yml:# Window opacity as a floating point number from `0.0` to `1.0`.
alacritty.yml:# The value `0.0` is completely transparent and `1.0` is opaque.
alacritty.yml:  #semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"
alacritty.yml:  # When set to `true`, selected text will be copied to the primary clipboard.
alacritty.yml:  # Values for `style`:
alacritty.yml:  # If this is `true`, the cursor will be rendered as a hollow box when the
alacritty.yml:# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
alacritty.yml:# Entries in `shell.args` are passed unmodified as arguments to the shell.
alacritty.yml:# Directory the shell is started in. If this is unset, or `None`, the working
alacritty.yml:# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
alacritty.yml:  # The `double_click` and `triple_click` settings control the time
alacritty.yml:  # If this is `true`, the cursor is temporarily hidden when typing.
alacritty.yml:    # When set to `None`, URL launching will be disabled completely.
alacritty.yml:# `Shift` modifier is automatically added as a requirement.
alacritty.yml:# - `mouse`:
alacritty.yml:#   - Numeric identifier such as `5`
alacritty.yml:# - `action` (see key bindings)
alacritty.yml:# - `mods` (see key bindings)
alacritty.yml:# `- { key: V, mods: Control|Shift, action: Paste }`
alacritty.yml:# - `key`: Identifier of the key pressed
alacritty.yml:#    Instead of using the name of the keys, the `key` field also supports using
alacritty.yml:#       `showkey --scancodes`.
alacritty.yml:# - `chars`: Send a byte sequence to the running application
alacritty.yml:#    The `chars` field writes the specified string to the terminal. This makes
alacritty.yml:#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
alacritty.yml:# - `action`: Execute a predefined action
alacritty.yml:# - `command`: Fork and execute a specified command plus arguments
alacritty.yml:#    The `command` field must be a map containing a `program` string and an
alacritty.yml:#    `args` array of command line parameter strings. For example:
alacritty.yml:#       `{ program: "alacritty", args: ["-e", "vttest"] }`
alacritty.yml:# - `mods`: Key modifiers to filter binding actions
alacritty.yml:#    Multiple `mods` can be combined using `|` like this:
alacritty.yml:#       `mods: Control|Shift`.
alacritty.yml:# - `mode`: Indicate a binding for only specific terminal reported modes
alacritty.yml:#    A `~` operator can be used before a mode to apply the binding whenever
alacritty.yml:#    the mode is *not* active, e.g. `~Alt`.
alacritty.yml:# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
alacritty.yml:  # Values for `log_level`:
manjaro/postinstall.sh:home_dir=`pwd`
UltiSnips/javascript.snippets:import ${1} from '${2:`!p snip.rv = first_letter_lower(t[1])`}'
UltiSnips/groovy.snippets:${1} `!p snip.rv = first_letter_lower(t[1])` = dm.find($1.class, id$1)
UltiSnips/groovy.snippets:${1} `!p snip.rv = first_letter_lower(t[1])` = context.getService($1.class)
UltiSnips/groovy.snippets:${1} `!p snip.rv = first_letter_lower(t[1])` = new $1()
UltiSnips/php.snippets:    return $this->`!p snip.rv = first_letter_lower(t[1])`;
UltiSnips/php.snippets:public function set${1}($`!p snip.rv = first_letter_lower(t[1])`)
UltiSnips/php.snippets:    $this->`!p snip.rv = first_letter_lower(t[1])` = $`!p snip.rv = first_letter_lower(t[1])`;
UltiSnips/php.snippets:$${1} = new `!p snip.rv = first_letter_upper(t[1])`(${2});
UltiSnips/php.snippets:class ${1:`!p snip.rv = snip.basename`} ${2:implements Interface}
UltiSnips/php.snippets:    `!p snip.rv = set_attributes_in_costructor(t[2])`${3}
